
import React, { useState, useEffect } from "react";
import { Requirement } from "@/entities/Requirement";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { format } from "date-fns";
import { FileText, Search, Eye, Copy, Trash2, Tag } from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";

export default function HistoryPage() {
  const [requirements, setRequirements] = useState([]);
  const [filteredRequirements, setFilteredRequirements] = useState([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [selectedRequirement, setSelectedRequirement] = useState(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    loadRequirements();
  }, []);

  useEffect(() => {
    if (searchTerm.trim()) {
      setFilteredRequirements(
        requirements.filter(req =>
          req.original_input.toLowerCase().includes(searchTerm.toLowerCase()) ||
          (req.refined_output && req.refined_output.toLowerCase().includes(searchTerm.toLowerCase())) ||
          (req.domain && req.domain.toLowerCase().includes(searchTerm.toLowerCase())) || // Keep for backward compatibility if `domain` still exists
          (req.domain_classification && req.domain_classification.toLowerCase().includes(searchTerm.toLowerCase()))
        )
      );
    } else {
      setFilteredRequirements(requirements);
    }
  }, [requirements, searchTerm]);

  const loadRequirements = async () => {
    setIsLoading(true);
    try {
      const data = await Requirement.list("-created_date", 50);
      setRequirements(data);
    } catch (error) {
      console.error("Error loading requirements:", error);
    }
    setIsLoading(false);
  };

  const copyToClipboard = (text) => {
    navigator.clipboard.writeText(text);
  };

  const truncateText = (text, maxLength = 100) => {
    return text.length > maxLength ? text.substring(0, maxLength) + "..." : text;
  };

  if (isLoading) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <div className="animate-spin w-8 h-8 border-4 border-blue-200 border-t-blue-600 rounded-full"></div>
      </div>
    );
  }

  return (
    <div className="space-y-6">
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
        <div>
          <h1 className="text-3xl font-bold text-slate-800">Processing History</h1>
          <p className="text-slate-600 mt-2">
            View and manage your previously processed requirements
          </p>
        </div>
        
        <div className="relative w-full md:w-80">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-slate-400" />
          <Input
            placeholder="Search requirements..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-10 bg-white border-slate-200"
          />
        </div>
      </div>

      {filteredRequirements.length === 0 ? (
        <Card className="bg-white/70 backdrop-blur-sm border-slate-200/60">
          <CardContent className="text-center py-12">
            <FileText className="w-12 h-12 text-slate-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-slate-700 mb-2">
              {requirements.length === 0 ? "No Requirements Yet" : "No Matching Results"}
            </h3>
            <p className="text-slate-500">
              {requirements.length === 0 
                ? "Start processing requirements to see your history here." 
                : "Try adjusting your search terms."}
            </p>
          </CardContent>
        </Card>
      ) : (
        <div className="grid gap-6">
          <AnimatePresence>
            {filteredRequirements.map((requirement) => (
              <motion.div
                key={requirement.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.3 }}
              >
                <Card className="bg-white/70 backdrop-blur-sm border-slate-200/60 hover:shadow-lg transition-all duration-200">
                  <CardHeader>
                    <div className="flex justify-between items-start">
                      <div className="flex-1">
                        <CardTitle className="text-lg font-semibold text-slate-800 mb-2">
                          {truncateText(requirement.original_input, 80)}
                        </CardTitle>
                        <div className="flex items-center gap-4 text-sm text-slate-500 flex-wrap">
                          <span>
                            {format(new Date(requirement.created_date), "MMM d, yyyy 'at' h:mm a")}
                          </span>
                          {requirement.domain_classification && (
                            <Badge variant="outline" className="flex items-center gap-1 border-cyan-200 bg-cyan-50 text-cyan-700">
                              <Tag className="w-3 h-3"/>
                              {requirement.domain_classification}
                            </Badge>
                          )}
                          <Badge 
                            className={`${
                              requirement.processing_status === "completed" 
                                ? "bg-emerald-100 text-emerald-700" 
                                : "bg-blue-100 text-blue-700"
                            } border-0`}
                          >
                            {requirement.processing_status}
                          </Badge>
                        </div>
                      </div>
                      
                      <div className="flex gap-2">
                        <Button
                          variant="ghost"
                          size="icon"
                          onClick={() => setSelectedRequirement(
                            selectedRequirement?.id === requirement.id ? null : requirement
                          )}
                        >
                          <Eye className="w-4 h-4" />
                        </Button>
                        {requirement.refined_output && (
                          <Button
                            variant="ghost"
                            size="icon"
                            onClick={() => copyToClipboard(requirement.refined_output)}
                          >
                            <Copy className="w-4 h-4" />
                          </Button>
                        )}
                      </div>
                    </div>
                  </CardHeader>
                  
                  <AnimatePresence>
                    {selectedRequirement?.id === requirement.id && (
                      <motion.div
                        initial={{ height: 0, opacity: 0 }}
                        animate={{ height: "auto", opacity: 1 }}
                        exit={{ height: 0, opacity: 0 }}
                        transition={{ duration: 0.3 }}
                        className="overflow-hidden"
                      >
                        <CardContent className="pt-0 space-y-4">
                          <div>
                            <h4 className="font-medium text-slate-800 mb-2">Original Input:</h4>
                            <div className="bg-slate-50 rounded-lg p-4 text-slate-700 text-sm">
                              {requirement.original_input}
                            </div>
                          </div>
                          
                          {requirement.domain_classification && (
                            <div>
                              <h4 className="font-medium text-slate-800 mb-2">Domain (Classifier Agent):</h4>
                              <div className="bg-cyan-50 rounded-lg p-4 text-slate-700 text-sm">
                                {requirement.domain_classification}
                              </div>
                            </div>
                          )}

                          {requirement.collector_keywords && (
                            <div>
                              <h4 className="font-medium text-slate-800 mb-2">Keywords (Collector Agent):</h4>
                              <div className="bg-blue-50 rounded-lg p-4 text-slate-700 text-sm">
                                {requirement.collector_keywords}
                              </div>
                            </div>
                          )}
                          
                          {requirement.clarifier_suggestions && (
                            <div>
                              <h4 className="font-medium text-slate-800 mb-2">Clarifications (Clarifier Agent):</h4>
                              <div className="bg-purple-50 rounded-lg p-4 text-slate-700 text-sm">
                                {requirement.clarifier_suggestions}
                              </div>
                            </div>
                          )}
                          
                          {requirement.validator_feedback && (
                            <div>
                              <h4 className="font-medium text-slate-800 mb-2">Validation (Validator Agent):</h4>
                              <div className="bg-amber-50 rounded-lg p-4 text-slate-700 text-sm">
                                {requirement.validator_feedback}
                              </div>
                            </div>
                          )}
                          
                          {requirement.refined_output && (
                            <div>
                              <h4 className="font-medium text-slate-800 mb-2">Final Output (Refiner Agent):</h4>
                              <div className="bg-emerald-50 rounded-lg p-4 text-slate-700 text-sm border-l-4 border-emerald-500">
                                {requirement.refined_output}
                              </div>
                            </div>
                          )}
                        </CardContent>
                      </motion.div>
                    )}
                  </AnimatePresence>
                </Card>
              </motion.div>
            ))}
          </AnimatePresence>
        </div>
      )}
    </div>
  );
}

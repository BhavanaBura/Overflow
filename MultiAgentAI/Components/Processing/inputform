import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Textarea } from "@/components/ui/textarea";
import { Button } from "@/components/ui/button";
import { Label } from "@/components/ui/label";
import { FileText, Sparkles } from "lucide-react";
import { motion } from "framer-motion";

export default function InputForm({ 
  input, 
  setInput, 
  onProcess, 
  isProcessing 
}) {
  const handleSubmit = (e) => {
    e.preventDefault();
    if (input.trim() && !isProcessing) {
      onProcess();
    }
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <Card className="bg-white/70 backdrop-blur-sm border-slate-200/60 shadow-sm">
        <CardHeader>
          <CardTitle className="flex items-center gap-3 text-xl text-slate-800">
            <div className="w-10 h-10 bg-gradient-to-r from-indigo-500 to-purple-600 rounded-xl flex items-center justify-center">
              <FileText className="w-5 h-5 text-white" />
            </div>
            Enter Your Requirement
          </CardTitle>
          <p className="text-slate-600">
            Describe your requirement or specification that needs processing and refinement.
          </p>
        </CardHeader>
        
        <CardContent>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div className="space-y-2">
              <Label htmlFor="requirement" className="text-sm font-medium text-slate-700">
                Requirement Description
              </Label>
              <Textarea
                id="requirement"
                value={input}
                onChange={(e) => setInput(e.target.value)}
                placeholder="Example: I need a user authentication system that supports Google login, password reset, and role-based access control for my web application..."
                className="min-h-[120px] bg-white border-slate-200 focus:border-blue-400 focus:ring-blue-200 resize-none text-slate-700"
                disabled={isProcessing}
              />
            </div>
            
            <div className="flex justify-end">
              <Button
                type="submit"
                disabled={!input.trim() || isProcessing}
                className="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white px-6 py-2 rounded-lg transition-all duration-200 flex items-center gap-2 shadow-lg"
              >
                {isProcessing ? (
                  <>
                    <div className="animate-spin w-4 h-4 border-2 border-white/30 border-t-white rounded-full" />
                    Processing...
                  </>
                ) : (
                  <>
                    <Sparkles className="w-4 h-4" />
                    Process with Agents
                  </>
                )}
              </Button>
            </div>
          </form>
        </CardContent>
      </Card>
    </motion.div>
  );
}
